service: email-service
frameworkVersion: "3"
useDotenv: true

custom:
  # ARN
  EVENTBUS_ARN: arn:aws:events:${aws:region}:${aws:accountId}:event-bus/${sls:stage}-${env:EVENTBUS_NAME}
  CERT_ARN: arn:aws:acm:${aws:region}:${aws:accountId}:certificate/c4b14dca-bc95-4e98-8939-9ba52882b063
  INGRESS_SQS_ARN: ${construct:ingress-queue.queueArn}

  # ENV
  EVENTBUS_NAME: ${sls:stage}-${env:EVENTBUS_NAME}
  DOMAIN_NAME: ${env:DOMAIN_NAME}
  EMAIL_ORIGIN: ${env:EMAIL_ORIGIN}
  SG_API_KEY: ${env:SG_API_KEY}
  WEBHOOK_EVENT_TYPE: ${env:WEBHOOK_EVENT_TYPE}
  WEBHOOK_SOURCE: ${env:WEBHOOK_SOURCE}

  INGRESS_SQS_URL: ${construct:ingress-queue.queueUrl}

  APP_TAG:
    Key: APP
    Value: AGLAYA-MAILER
  NODE_ENV:
    dev: development
    prod: production

  basePath:
    prod: ""
    dev: dev

  customDomain:
    domainName: ${self:custom.DOMAIN_NAME}
    basePath: "${self:custom.basePath.${sls:stage}}"
    stage: ${sls:stage}
    certificateName: ${self:custom.DOMAIN_NAME}
    certificateArn: ${self:custom.CERT_ARN}
    endpointType: REGIONAL
    apiType: rest
    enabled: true

provider:
  name: aws
  runtime: nodejs20.x
  deploymentMethod: direct
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  memorySize: 1024
  architecture: arm64
  logRetentionInDays: 7

  iam:
    role:
      statements:
        # eventbridge
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - ${self:custom.EVENTBUS_ARN}

  environment:
    REGION: ${aws:region}
    NODE_ENV: ${self:custom.NODE_ENV.${sls:stage}, 'development'}
    EVENT_BUS_ARN: ${self:custom.EVENTBUS_ARN}
    SG_API_KEY: ${self:custom.SG_API_KEY}
    EMAIL_ORIGIN: ${self:custom.EMAIL_ORIGIN}
    WEBHOOK_EVENT_TYPE: ${self:custom.WEBHOOK_EVENT_TYPE}
    WEBHOOK_SOURCE: ${self:custom.WEBHOOK_SOURCE}

resources:
  # eventbridge
  - ${file(resources/event-bridge/event-bus.yml)}
  - ${file(resources/event-bridge/rule-webform-submitted.yml)}
  # sns
  - ${file(resources/sns/sns-policy-webform-submitted.yml)}
  - ${file(resources/sns/sns-sub-webform-submitted.yml)}
  - ${file(resources/sns/sns-topic-webform-submitted.yml)}
  # sqs
  - ${file(resources/sqs/sqs-policy.yml)}
  # outputs
  - ${file(resources/outputs.yml)}

package:
  patterns:
    - "!docs/**"
    - "!tests/**"
    - "!.serverless/**"
    - "!.editorconfig"
    - "!.eslintrc.cjs"
    - "!.prettierrc.cjs"
    - "!.nvmrc"
    - "!.gitignore"
    - "!.github"
    - "!.git"
  individually: false
  excludeDevDependencies: true

functions:
  webhook:
    handler: src/services/webhook/index.handler
    memorySize: ${self:provider.memorySize}
    description: Ingest events
    events:
      - http:
          method: post
          path: /{target}
          request:
            parameters:
              paths:
                target: true

constructs:
  ingress-queue:
    type: queue
    batchSize: 5
    worker:
      handler: src/services/mailer/index.handler
      memorySize: ${self:provider.memorySize}
      description: Forwards events to Sendgrid

plugins:
  - serverless-lift
  - serverless-domain-manager
